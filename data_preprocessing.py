import numpy as np
import statistics
from sklearn.preprocessing import RobustScaler


def create_dataset(X, y, time_steps=1, step=1):
    """
    Prepare the dataset

    Args:
        X (dataframe): a dataframe containing specific columns' data
        y (dataframe): a dataframe only containing class names
        time_steps (int): the window size
        step (int): the overlap between each window

    Returns:
        Data and labels in array format
    """
    Xs, ys = [], []
    for i in range(0, len(X), step):
        v = X.iloc[i:(i + time_steps)].values
        labels = y.iloc[i: (i + time_steps)]
        Xs.append(v)
        ys.append(statistics.mode(labels))

    return np.array(Xs), np.array(ys).reshape(-1, 1)


def scaling_dataset(df_train, df_val, column_names):
    """
    Scaling the dataset

    Args:
        df_train (dataframe): a dataframe containing train data
        df_val (dataframe): a dataframe containing validation data
        column_names (list): a list of column names

    Returns:
        The scaled train and val data
    """
    scaler = RobustScaler()
    scaler = scaler.fit(df_train[column_names].values)
    df_train.loc[:, column_names] = scaler.transform(df_train[column_names].to_numpy())
    df_val.loc[:, column_names] = scaler.transform(df_val[column_names].to_numpy())

    return df_train, df_val
