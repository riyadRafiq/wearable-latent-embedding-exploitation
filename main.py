import numpy as np
import pandas as pd
import argparse
import yaml
import json
import os
import warnings
from utils import read_data, leave_subject, custom_label_encode
from data_preprocessing import create_dataset, scaling_dataset
from train_test import train_test_model

warnings.filterwarnings("ignore", category=Warning)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Latent Embedding Exploitation')
    parser.add_argument('--subject_id', default=101, type=int,
                        help='Impaired Subject ID for Model Training and Testing')
    parser.add_argument('--gesture_map', default='order1', type=str, help='Gestures Order')

    args = parser.parse_args()

    model_config_file = open('configs/model_data.yaml', mode='r')
    model_cfg = yaml.load(model_config_file, Loader=yaml.FullLoader)
    gesture_maps = json.load(open(os.path.join('configs', 'gesture_mapping', args.gesture_map + '.json')))

    # Load data from control participants
    df_control = read_data('./dataset/control-gesture-data-source.csv', 2, True)
    df_source = pd.DataFrame(columns=['x_axis', 'y_axis', 'z_axis', 'gesture', 'userId'])
    df_source = pd.concat([df_source, df_control[df_control['userId'].isin(model_cfg['train_ids']) &
                                                 df_control['gesture'].isin(model_cfg['gestures_source'])]])
    df_train, df_val, ids_val = leave_subject(df_source, n=1)
    df_train, df_val = scaling_dataset(df_train, df_val, ['x_axis', 'y_axis', 'z_axis'])
    X_train_source, y_train_source = create_dataset(
        df_train[['x_axis', 'y_axis', 'z_axis']],
        df_train.gesture,
        model_cfg['time_steps'],
        model_cfg['step']
    )

    # Load data from the impaired participant
    df_impaired = read_data('./dataset/impaired-gesture-data-target.csv', 5, False)
    df_target = pd.DataFrame(columns=['x_axis', 'y_axis', 'z_axis', 'gesture', 'userId'])
    df_target = pd.concat([df_target, df_impaired[df_impaired['userId'].isin([args.subject_id]) &
                                                  df_impaired['gesture'].isin(model_cfg['gestures_target'])]])

    X_target, y_target = create_dataset(
        df_target[['x_axis', 'y_axis', 'z_axis']],
        df_target.gesture,
        model_cfg['time_steps'],
        model_cfg['step']
    )

    y_target = custom_label_encode(y_target, gesture_maps)
    labels = np.unique(y_target)

    X_train_target, y_train_target = [], []
    X_test_target, y_test_target = [], []

    for label in labels:
        num_sample = 0
        for idx in range(len(y_target)):
            if y_target[idx] == label:
                if num_sample < 5:
                    num_sample += 1
                    X_train_target.append(X_target[idx])
                    y_train_target.append(y_target[idx])
                else:
                    X_test_target.append(X_target[idx])
                    y_test_target.append(y_target[idx])

    X_train_target, y_train_target = np.array(X_train_target), np.array(y_train_target)
    X_test_target, y_test_target = np.array(X_test_target), np.array(y_test_target)

    print('\n[MODEL TRAINING AND EVALUATION]')
    train_test_model(X_train_source, X_train_target, y_train_target, X_test_target, y_test_target,
                     model_cfg, gesture_maps)
